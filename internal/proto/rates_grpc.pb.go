// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rates.proto

package exchanger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exhanger_GetRates_FullMethodName = "/exchanger.Exhanger/GetRates"
)

// ExhangerClient is the client API for Exhanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExhangerClient interface {
	GetRates(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*ValueResponce, error)
}

type exhangerClient struct {
	cc grpc.ClientConnInterface
}

func NewExhangerClient(cc grpc.ClientConnInterface) ExhangerClient {
	return &exhangerClient{cc}
}

func (c *exhangerClient) GetRates(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*ValueResponce, error) {
	out := new(ValueResponce)
	err := c.cc.Invoke(ctx, Exhanger_GetRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExhangerServer is the server API for Exhanger service.
// All implementations must embed UnimplementedExhangerServer
// for forward compatibility
type ExhangerServer interface {
	GetRates(context.Context, *CryptoRequest) (*ValueResponce, error)
	mustEmbedUnimplementedExhangerServer()
}

// UnimplementedExhangerServer must be embedded to have forward compatible implementations.
type UnimplementedExhangerServer struct {
}

func (UnimplementedExhangerServer) GetRates(context.Context, *CryptoRequest) (*ValueResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedExhangerServer) mustEmbedUnimplementedExhangerServer() {}

// UnsafeExhangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExhangerServer will
// result in compilation errors.
type UnsafeExhangerServer interface {
	mustEmbedUnimplementedExhangerServer()
}

func RegisterExhangerServer(s grpc.ServiceRegistrar, srv ExhangerServer) {
	s.RegisterService(&Exhanger_ServiceDesc, srv)
}

func _Exhanger_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhangerServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exhanger_GetRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhangerServer).GetRates(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exhanger_ServiceDesc is the grpc.ServiceDesc for Exhanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exhanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchanger.Exhanger",
	HandlerType: (*ExhangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _Exhanger_GetRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rates.proto",
}
